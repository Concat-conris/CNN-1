Para criar uma rede neural convolucional (CNN), siga estes passos:

1. Importe as bibliotecas necessárias:

```python
import torch                                                                                          
import torch.nn as nn                                                                                 
import torchvision.models as models                                                                   
```                                                                                                   

2. Defina a classe da rede CNN:

```python
class CNN(nn.Module):                                                                                 
    def __init__(self, num_classes=10):                                                               
        super(CNN, self).__init__()                                                                   
        self.conv1 = nn.Conv2d(3, 64, kernel_size=3)                                                  
        self.relu1 = nn.ReLU()                                                                        
        self.maxpool1 = nn.MaxPool2d(kernel_size=2, stride=2)                                         
                                                                                                      
        self.conv2 = nn.Conv2d(64, 128, kernel_size=3)                                                
        self.relu2 = nn.ReLU()                                                                        
        self.maxpool2 = nn.MaxPool2d(kernel_size=2, stride=2)                                         
                                                                                                      
        self.fc1 = nn.Linear(128 * 4 * 4, 512)                                                        
        self.relu3 = nn.ReLU()                                                                        
        self.dropout = nn.Dropout(p=0.5)                                                              
        self.fc2 = nn.Linear(512, num_classes)                                                        
                                                                                                      
    def forward(self, x):                                                                             
        out = self.conv1(x)                                                                           
        out = self.relu1(out)                                                                         
        out = self.maxpool1(out)                                                                      
                                                                                                      
        out = self.conv2(out)                                                                         
        out = self.relu2(out)                                                                         
        out = self.maxpool2(out)                                                                      
                                                                                                      
        out = out.view(-1, 128 * 4 * 4)                                                               
        out = self.fc1(out)                                                                           
        out = self.relu3(out)                                                                         
        out = self.dropout(out)                                                                       
        out = self.fc2(out)                                                                           
                                                                                                      
        return out                                                                                    
```                                                                                                   

3. Crie um objeto da rede e adicione camadas se necessário:

```python
model = CNN(num_classes=10)                                                                           
```                                                                                                   

4. Defina um critério de perda e otimize o modelo:

```python
criterion = nn.CrossEntropyLoss()                                                                     
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)                                            
```                                                                                                   

5. Treine o modelo com dados de treinamento:

```python
for epoch in range(num_epochs):                                                                       
    for inputs, labels in dataloader:                                                                 
        optimizer.zero_grad()                                                                         
        outputs = model(inputs)                                                                       
        loss = criterion(outputs, labels)                                                             
        loss.backward()                                                                               
        optimizer.step()                                                                              
```                                                                                                   

6. Avalie o desempenho da rede em dados de teste:

```python
model.eval()                                                                                          
test_loss = 0                                                                                         
correct = 0                                                                                           
with torch.no_grad():                                                                                 
    for inputs, labels in test_loader:                                                                
        outputs = model(inputs)                                                                       
        loss = criterion(outputs, labels)                                                             
        test_loss += loss.item()                                                                      
        _, predicted = torch.max(outputs.data, 1)                                                     
        correct += (predicted == labels).sum().item()                                                 
                                                                                                      
accuracy = correct / len(test_loader.dataset)                                                         
print(f'Test Accuracy: {accuracy:.2f}%')                                                              
```                                                                                                   

Lembre-se de ajustar os hiperparâmetros conforme necessário para melhorar o desempenho da sua rede CNN
.
